#!/usr/bin/php
<?php

// Detect if running under Windows
define ("WINDOWS", strpos(strtoupper(PHP_OS),'WIN')!==false);

// some constants related to the DMP file format.
// (change if necessary due to changes in DMP format)
define("MAXSIZE",0x33);
define ("FILE_VERSION", 0x0b);
define ("SYSTEM_YM2151", 0x08);
define ("SYSTEM_GENESIS", 0x02);
define ("MODE_FM", 0x01);
define ("YMBASE_R38", 0x9fe0);
define ("YMBASE_R39", 0x9f40);

define ("EXT_ASM", '.inc');
define ("EXT_BASIC", '.bas');
define ("EXT_C", '.h');
define ("EXT_BIN", '.YMP');

// constants for BASIC output
define ("VARNAME","CH");	// name of BASIC variable that chooses voice#
define ("BASIC_STEP",1);	// how much to step the BASIC line numbers

define ("USAGE","$argv[0] [-h] [-H] [-l <BASIC line number>] [-o output_name_prefix] -{format(s)} file1 [file2] [...]");

global $OF;

$dmplist = parse_cmdline_args();
$basline = BASIC_LINE;
$patches = load_patches($dmplist);

$ERR=false;

if ($patches['n'] > 0) {
	printf("Loaded a total of %d patches:\n",$patches['n']);
	$n=0;
	foreach($patches['names'] as $name) {
		printf(" %2d: %s\n",$n++,$name);
	}
	if (OUT_ASM)	{ $ERR = write_asm($patches); }
	if (OUT_BASIC)	{ $ERR = write_basic($patches); }
	if (OUT_BIN)	{ $ERR = write_bin($patches['data']); }
	if (OUT_C)		{ $ERR = write_c($patches); }
} else {
	print "No input files successfully imported. No output generated.\n";
	exit(1);
}
if ($ERR) { exit(1); }
exit(0);

// =================================== END OF MAIN PROGRAM =============

function namefilter($name) {
// filter characters from names, as they're going to be used as identifiers
// in code. May as well save users from themselves if filenames have chars
// that don't work in identifiers in programs.
	$name = preg_replace("/[\t\n]/", " ", $name); // remove tabs and newlines
	$name = preg_replace("/\s+/", " ", $name); // remove multi-space
	$name = preg_replace("/[\s.-]/", "_", $name); // space,dot,and dash -> underscore
	$name = preg_replace("/^[0-9]*/", "", $name); // remove leading digits
	$name = 'YMP_' . $name; // apply YMP_ prefix. (YMP = YM Patch)
	return($name);
}

function load_patches($filelist) {
	$p = array(
		'n' 	=> 0,		// number of patches loaded
		'data'	=> array(),	// raw binary bytes of all patches together
		'names'	=> array()	// names of the files the patches were imported from
	);
	if (sizeof($filelist) == 0) { return $p; } // early exit to avoid extra output to STDOUT
	printf ("Processing %d files...\n",sizeof($filelist));
	foreach($filelist as $infile) {
		$name = trim(pathinfo($infile)['filename']);
		$ext  = trim(pathinfo($infile)['extension']);
		switch(strtolower($ext)) {
		case 'dmp':
			$patch = get_dmp_patch($infile);
			if (sizeof($patch) != 26) {
				print "WARNING: $infile did not contain a valid patch. (skipped)\n";
			} else {
				$p['data'] = array_merge($p['data'],$patch);
				//$p['data'] = $p['data'] + $patch; // THIS WORKED UNTIL COMBINING FUNCTIONS.....
				array_push($p['names'],namefilter($name));
				$p['n']++;
			}
			break;
		case 'opm':
			print "STUB: OPM file $infile (support is planned)\n";
			break;
		default:
			print "WARNING: Unknown file type: $infile (skipped)\n";
			break;
		}
	}
	return($p);
}

function get_dmp_patch($filename) {

	$data = array();

	error_reporting(E_ALL ^ E_WARNING); // disable PHP warnings for this check...
	$filesize = filesize($filename);

	if ( $filesize > MAXSIZE ) {
	  print "WARNING: $filename is too large to be a DMP file. (Skipping)\n";
	  return($data);
	}
	$f = fopen($filename, "r");
	error_reporting(E_ALL);
	if (! $f) {
	  print "WARNING: Unable to open input file $filename (Skipping)\n";
	  return(array());
	}
	$dmp=fread($f,$filesize);
	fclose($f);
	$dmp = unpack(sprintf('C%d',$filesize),$dmp);
	$dmp = array_values($dmp);

	if (sizeof($dmp)==0) {
		print "WARNING: error while reading $filename. (Skipping)\n";
		return($data);
	}

	if ($dmp[0] != FILE_VERSION) {
	  print "ERROR: The first byte of DMP is not ".FILE_VERSION."\n";
	  return($data);
	};

	if (($dmp[1] != SYSTEM_YM2151) && ($dmp[1] != SYSTEM_GENESIS)) {
	  print "ERROR: DMP is not a YM2151 or Genesis patch.\n";
	  return($data);
	};

	if ($dmp[2] != MODE_FM) {
	  print "ERROR: DMP data instrument mode is not set to FM.\n";
	  return($data);
	};

	$p = array (
	  'LR'		=> 0xc0,
	  'PMS'     => ($dmp[3] & 0x07) << 4,
	  'FB'      => ($dmp[4] & 0x07) << 3,
	  'CONNECT' => $dmp[5]  & 0x07,
	  'AMS'     => $dmp[6]  & 0x03
	);
	$data[0] = $p['LR'] | $p['FB'] | $p['CONNECT'];
	$data[1] = $p['PMS'] | $p['AMS'];

	$offset = 7; // per-operator parameters begin at DMP offset 7.

	for ( $oper = 0 ; $oper < 4 ; $oper++ ) {
		// Create a table of the Per-Op parameter names from
		// the YM2151 datasheet. Pre-mask and shift the bits of each
		// parameter from DMP data for their proper places in the YM registers.
		// (names make it SO MUCH EASIER to follow the code)
		$p = array(
			'MUL'   => $dmp[$offset+0]  &0x0f,
			'TL'    => $dmp[$offset+1]  &0x7f,
			'AR'    => $dmp[$offset+2]  &0x1f,
			'D1R'   => $dmp[$offset+3]  &0x1f,
			'D1L'   => ($dmp[$offset+4] &0x0f)<<4,
			'RR'    => $dmp[$offset+5]  &0x0f,
			'AMSEN' => ($dmp[$offset+6] &0x01)<<7,
			'KS'    => ($dmp[$offset+7] &0x03)<<6,
			'DT1'   => ($dmp[$offset+8] &0x07)<<4,
			'DT2'   => ($dmp[$offset+8] &0x30)<<2, // why'd they bitstuff this ONE parameter?
			'D2R'   => $dmp[$offset+9]  &0x1f,
			'SSGEG' => $dmp[$offset+10] // Unused in YM2151
		);
		$data[$oper+2]  = $p['DT1'] | $p['MUL'];
		$data[$oper+6]  = $p['TL'];
		$data[$oper+10] = $p['KS'] | $p['AR'];
		$data[$oper+14] = $p['AMSEN'] | $p['D1R'];
		$data[$oper+18] = $p['DT2'] | $p['D2R'];
		$data[$oper+22] = $p['D1L'] | $p['RR'];

		$offset += 11;
	};
	ksort($data,SORT_NUMERIC);
	// as PHP doesn't use the index numbers as actual ordinal indexing, this array
	// is built in a bad order. This loop builds a new one where index key = actual order.
	// ... this is one of those PHP-isms that make people hate PHP, and maybe there's a better
	// way to fix this with a built-in function, but I'm tired of reading docs, and this works.
//	$returndata = array();
//	for($i=0;$i<26;$i++) { array_push($returndata,$data[$i]); }
	//return($returndata);
	return ($data);
}

function set_outfile($filename) {
//returns "errors_present" i.e. true if errors, false if successful
// i.e. this boolean is shell command "exit code" mentality
	global $OF;
	error_reporting(E_ALL ^ E_WARNING);
	$OF = fopen($filename,'w');
	error_reporting(E_ALL);
	if (! $OF) {
		print "Error opening $filename for writing. Skipping.\n";
		return(true);
	}
	return(false); //
};

function write_asm($patches) {

	global $OF;

	$ofname = OUTNAME . EXT_ASM;
	if(set_outfile($ofname)) { return(true); } // return errors=true
	$i = 0;
	foreach($patches['names'] as $name) {
		fwrite($OF,"$name:");
		for ($j=$i;$j<$i+26;$j++) {
			if (($j-$i) % 8 == 0)
				fwrite($OF,"\n\t.byte\t");
			else
				fwrite($OF,",");
			fwrite($OF,sprintf('$%02X',$patches['data'][$j]));
		}
		fwrite($OF,"\n\n");
		$i+=26;
	}
	fwrite($OF,"\n;Patch Table (low together, high together)\n");
	foreach(array('lo','hi') as $order) {
		if ($order == 'lo')
			$bracket = '<';
		else
			$bracket = '>';
		fwrite($OF,sprintf("%s_%s:",OUTNAME,$order));
		$i = 0;
		foreach($patches['names'] as $name) {
			if ($i % 4 == 0)
				fwrite($OF,"\n\t.byte\t");
			else
				fwrite($OF,", ");
			$i++;
			fwrite($OF,sprintf("%s%s",$bracket,$name));
		}
		fwrite($OF,"\n");
	}
	fwrite($OF,"\n;Patch table indexes:\n");
	$i = 0;
	foreach($patches['names'] as $name) {
		$name = preg_replace("/^YMP_/", "", $name);
		$name = strtoupper($name . "_ID");
		fwrite($OF,"\t$name\t= $i\n");
		$i++;
	}
	print "Wrote ASM output to $ofname\n";
	fclose($OF);
	return(false); // false=no errors;
}

function write_basic($patches) {

	global $OF;
	$tab=array(
		0x20,0x38,
		0x40,0x48,0x50,0x58,0x60,0x68,0x70,0x78,
		0x80,0x88,0x90,0x98,0xa0,0xa8,0xb0,0xb8,
		0xc0,0xc8,0xd0,0xd8,0xe0,0xe8,0xf0,0xf8
	);
	$ofname = OUTNAME . EXT_BASIC;
	if(set_outfile($ofname)) { return(true); }

	printbasic ('REM SET '.VARNAME.'= VOICE NUMBER AND GOSUB HERE TO LOAD PATCH');
	$i = 0;
	foreach ($patches['names'] as $name) {
		printbasic (sprintf("REM %s",strtoupper($name)));
		for ($j = 0 ; $j < 26 ; $j++) {
			printbasic (sprintf('POKE $%04X,$%02X+CH : POKE $%04X,$%02X',YMBASE,$tab[$j],YMBASE+1,$patches['data'][$i]));
			$i++;
		}
		printbasic('RETURN');
	}
	fclose($OF);
	print "Wrote BASIC output to $ofname\n";
	return(false);
}

function write_c($patches) {
	global $OF;

	$ofname = OUTNAME . EXT_C;
	if(set_outfile($ofname)) { return(true); }
	// print an enum for easy reference into a table of patch pointers
	fprintf($OF,"// instrument name references\n");
	fprintf($OF,sprintf("enum %s {\n",OUTNAME.'_index'));
	$i = 0;
	foreach ($patches['names'] as $name) {
		fprintf($OF,sprintf("\t%s = %d,\n",strtoupper($name),$i));
		$i += 26;
	}
	fprintf($OF,sprintf("\t%s = %d\n};\n\n",strtoupper(OUTNAME . "_COUNT"),$i/26));

	$data = $patches['data'];
	$n = $patches['n'];
	// print array of patch data bytes
	$i = 0;
	$d = 0;
	fprintf($OF,sprintf("static const char %s[] = {",OUTNAME.'_data'));
	while ($d < sizeof($data)) {
		if ($d % 16 == 0) {
			fprintf($OF,"\n\t");
		}
		fprintf($OF,sprintf("0x%02x,",$data[$d++]));
	};
	fprintf($OF,"\n};\n\n");
	fclose($OF);
	print "Wrote C output to $ofname\n";
	return(false); // false=no errors;
}

function write_bin($patchdata) {

	global $OF;

	$ofname = OUTNAME . EXT_BIN;
	if(set_outfile($ofname)) { return(true); }

	if (BIN_PRGHDR) {fwrite($OF,"yi");}
	fwrite($OF,pack('C*',...$patchdata));
	fclose($OF);
	print "Wrote binary output to $ofname";
	if (BIN_PRGHDR) {
		print " with 2-byte dummy PRG header\n";
	} else {
		print "\n";
	}
	return(false); // false=no errors;
}

function printbasic($s) {
  global $basline;
  global $OF;

  fprintf ($OF,"%d %s\n",$basline, $s);
  $basline += BASIC_STEP;
};

function glob_windows_filenames($list) {
	$newlist = array();
	foreach ($list as $item) {
		$result = glob($item);
		if (sizeof($result) > 0)
			$newlist = $newlist + $result;
		else
			printf("WARNING: %s did not match any files\n",$item);
	}
	return($newlist);
}

function deduplicate($files) {
	if (WINDOWS)
		return array_intersect_key(
			$files,
			array_unique( array_map( "strtolower", $files ) )
		);
	else
		return array_unique($files);
}

function parse_cmdline_args() {
	global $argc;
	global $argv;

	$dmpfiles = array();

	$opts = getopt('hHprbBacl:o:', [], $rest_index);

	if (isset($opts['h'])) {usage();}
	if (isset($opts['H'])) {show_format_help();}
	if ($argc < 2) {shortusage();}

	if (isset($argv[$rest_index])) {
		$dmpfiles = array_slice($argv,$rest_index);
		if(WINDOWS) {
			$dmpfiles = glob_windows_filenames($dmpfiles);
		}
		$dmpfiles = deduplicate($dmpfiles);
	} else {
		shortusage("No input files specified.");
	}

	if (isset($opts['o'])) {
		define("OUTNAME",$opts['o']);
	}
	else {
		define("OUTNAME","patches");
	}

	if (isset($opts['p']) || isset($opts['r'])) {
		define("OUT_BIN",true);
		if(isset($opts['r'])) {
			define("BIN_PRGHDR",false);
		} else {
			define("BIN_PRGHDR",true);
		}
	} else {
		define("OUT_BIN",false);
	}

	if (isset($opts['l'])) {
		// check for numeric? (maybe later)
		define("BASIC_LINE",$opts['l']);
	} else {
		define("BASIC_LINE",10000);
	}

	if (isset($opts['a'])) {
		define("OUT_ASM",true);
	} else {
		define("OUT_ASM",false);
	}

	if (isset($opts['b'])||isset($opts['B'])) {
		define("OUT_BASIC",true);
		if (isset($opts['b'])) {
			define("YMBASE",YMBASE_R39);
		}
		else {
			define("YMBASE",YMBASE_R38);
		}
	} else {
		define("OUT_BASIC",false);
	}

	if (isset($opts['c'])) {
		define("OUT_C",true);
	} else {
		define("OUT_C",false);
	}

	if ((OUT_ASM || OUT_BASIC || OUT_BIN || OUT_C)===false) {
		shortusage("No output format selected.");
	}

	return($dmpfiles);
}

function shortusage($message = "") {
	global $argv;
	print "\nUSAGE:\n";
	print "  " . USAGE . "\n";
	print "  $argv[0] -h for more help.\n\n";
	print "FORMATS:\n  One or more of the following: -a -b -B -c -p -r\n";
	print "  ($argv[0] -h for more details)\n\n";
	if (strlen($message) > 0) {
		print "ERROR:\n  $message\n\n";
	}
	exit(1);
}

function usage() {
	global $opts;
	global $argv;

	$row = "%15s %s\n";


	print "dmp2x16 is a script that converts Deflemask FM instrument files into one or ";
	print "more formats suitable for import on the Commander X16. Each .DMP file is one";
	print "instrument. All valid instruments will be output combined into a single file";
	print "for each activated output format.\n";
	print "\nUSAGE:\n";
	print USAGE . "\n";
	printf($row,"-h :","This help information.");
	printf($row,"-H :","Show help about using the output data format.");
	print "\nINPUT FILE(s): Deflemask DMP instruments (must be FM instruments).\n";
	print "\nOUTPUT FORMATS:\n";
	print "At least one output format must be chosen (BASIC, C, ASM, or BINARY)\n";
	printf($row,"-b or -B :","Create BASIC subroutines which patch the YM");
	printf($row,"","-B : Use YM2151 base address $9FE0. (r38 emulator)");
	printf($row,"","-b : Use YM2151 base address $9F40. (r39 / real HW)");
	printf($row,"","   : if both are specified, -b is used.");
	printf($row,"-c :","Create C byte arrays for each input file");
	printf($row,"-a :","Create Assembly .byte sets with one label per input file");
	printf($row,"-p :","Create a binary file with two dummy bytes as PRG header");
	printf($row,"-r :","Create a binary file with no dummy PRG header");
	printf($row,"","-- If both -p and -r are specified, -r takes priority");
	print "\nOUTPUT FILE NAMES:\n";
	printf($row,"-o name :","Specifies output filename prefix  (default=patches)");
	print "\nThe output file(s) for BASIC, C, Assembly, and binary will be named as\n";
	printf("name%s name%s, name%s, name%s (YM Patch) respectively\n",EXT_BASIC,EXT_C,EXT_ASM,EXT_BIN);
	print "NOTE: output files are automatically overwritten if they already exist.\n";
	print "\nOTHER:\n";
	printf($row,"-l","<BASIC line number> : BASIC routines begin at this line number");
	printf($row,"","(default = 10000)");
	if (isset($opts['h'])) { exit(0); } else { exit(1); }
}

function show_format_help() {
	print "BASIC:\n";
	print "  Each input file creates a subroutine which loads that patch into the YM.\n";
	print "  Line numbering begins at 10000 unless otherwise specified, with line numbers\n";
	print "  incrementing by 1 for each command. New Instruments will each begin at the next\n";
	print "  round line number if multiple instruments are being converted as a batch.\n";
	print "\n  To use the routines, set variable " . VARNAME . "=voice number and then GOSUB\n";
	print "  into the desired subroutine.\n";
	print "  Example: " . VARNAME . "=2 : GOSUB 10000\n";
	print "           (load the patch at line 10000 into voice 2 (voices range 0-7)\n\n";
	print "BINARY (YMP):\n";
	print "  26 bytes arranged to for loading into the following YM registers:\n";
	print '    $20,$38,$40,$48,$50,$58,$60,$68,$70,$78 ... ,$E8,$F0,$F8'."\n";
	print "    (note that $28 and $30 are SKIPPED)\n";
	print "  To patch the YM on any voice, adjust the above addresses += voice_number\n";
	print "    - e.g.: $23,$3B,$43,$4B,$58,$5B,... for voice 3 (voices range 0-7)\n\n";
	print "C ARRAY:\n";
	print "  Each input file will result in an array of 26 bytes in the BINARY's arrangement.\n";
	print "  Array names will be YMP_<filename> based on the name of the input file (with DMP removed)\n";
	print "  For additional convenience, an array of patch indexes will be created, pointing to the start\n";
	print "  of each individual patch within the byte array, as well as an ENUM using the file names\n";
	print "  used in the batch.\n\n";
	print "ASM .BYTES:\n";
	print "  Same as above except using labels to reference each patch.\n";
	exit(0);
}


?>
